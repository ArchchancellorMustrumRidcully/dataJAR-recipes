<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
    <key>Description</key>
    <string>Downloads the latest version of Audinate Dante Via and imports into Munki.

Set the DERIVE_MIN_OS variable to a non-empty string to set the minimum_os_version via MunkiInstallsItemsCreator.</string>
    <key>Identifier</key>
    <string>com.github.dataJAR-recipes.munki.Audinate Dante Via</string>
    <key>Input</key>
    <dict>
        <key>NAME</key>
        <string>Audinate Dante Via</string>
        <key>MUNKI_REPO_SUBDIR</key>
        <string>apps/%NAME%</string>
        <key>DERIVE_MIN_OS</key>
        <string>YES</string>
        <key>pkginfo</key>
        <dict>
            <key>catalogs</key>
            <array>
                <string>testing</string>
            </array>
            <key>description</key>
            <string>Dante Via is easy-to-use software that delivers unprecedented multi-channel routing of computer-based audio, allowing a wide range of applications and devices to be networked and interconnected, easily and inexpensively.</string>
            <key>display_name</key>
            <string>Audinate Dante Via</string>
            <key>name</key>
            <string>%NAME%</string>
            <key>unattended_install</key>
            <true/>
        </dict>
    </dict>
    <key>MinimumVersion</key>
    <string>2.7</string>
    <key>ParentRecipe</key>
    <string>com.github.dataJAR-recipes.download.Audinate Dante Via</string>
    <key>Process</key>
    <array>
        <dict>
            <key>Processor</key>
            <string>FlatPkgUnpacker</string>
            <key>Arguments</key>
            <dict>
                <key>flat_pkg_path</key>
                <string>%pkg_path%</string>
                <key>destination_path</key>
                <string>%RECIPE_CACHE_DIR%/unpack</string>
            </dict>
        </dict>
        <dict>
            <key>Processor</key>
            <string>PkgPayloadUnpacker</string>
            <key>Arguments</key>
            <dict>
                <key>pkg_payload_path</key>
                <string>%RECIPE_CACHE_DIR%/unpack/Dante_Via.pkg/Payload</string>
                <key>destination_path</key>
                <string>%RECIPE_CACHE_DIR%/%NAME%</string>
                <key>purge_destination</key>
                <true/>
            </dict>
        </dict>
        <dict>
            <key>Processor</key>
            <string>MunkiInstallsItemsCreator</string>
            <key>Arguments</key>
            <dict>
                <key>faux_root</key>
                <string>%RECIPE_CACHE_DIR%/%NAME%/</string>
                <key>installs_item_paths</key>
                <array>
                    <string>/Applications/Dante Via.app</string>
                </array>
                <key>version_comparison_key</key>
                <string>CFBundleShortVersionString</string>
                <key>derive_minimum_os_version</key>
                <string>%DERIVE_MIN_OS%</string>
            </dict>
        </dict>
        <dict>
            <key>Processor</key>
            <string>MunkiPkginfoMerger</string>
        </dict>
        <dict>
            <key>Processor</key>
            <string>PlistReader</string>
            <key>Arguments</key>
            <dict>
                <key>info_path</key>
                <string>%RECIPE_CACHE_DIR%/%NAME%/Applications/Dante Via.app/Contents/Info.plist</string>
                <key>plist_keys</key>
                <dict>
                    <key>CFBundleShortVersionString</key>
                    <string>version</string>
                    <key>installcheck_script</key>
                    <string>#!/usr/local/munki/munki-python

'''
Copyright 2025, Jamf Software, LLC.

DESCRIPTION

See docstring in main()

'''

import os
import plistlib
import sys
# pylint: disable = import-error
from SystemConfiguration import SCDynamicStoreCopyConsoleUser
sys.path.insert(0, '/usr/local/munki')
from munkilib.pkgutils import MunkiLooseVersion as LooseVersion


def main():
    '''
        Exits with exit code 1 if no-one is logged in.

        If info_plist_path doesn't exist, proceeds with install.

        If info_plist_path exists and is older than munki, proceeds with install.

    '''

    # App path
    app_path = '/Applications/Dante Via.app/'
    app_version = '%version%'
    info_plist_path = os.path.join(app_path, 'Contents/Info.plist')

    # Boolean return if user is logged in
    logged_in = user_logged_in()

    # If a user is logged in
    if logged_in:
        # If the app exists
        if os.path.exists(info_plist_path):
            # Try to read in info_plist_path, raise if cannot be parsed
            try:
                # Read in the plist
                with open(info_plist_path, "rb") as plist_file:
                    parsed_plist = plistlib.load(plist_file)
                # Get version from info.plist
                installed_version = parsed_plist['CFBundleShortVersionString']
                print(f"{app_path} version {installed_version}, installed...")
            # Raising if plist cannot be parsed or version determined from plist
            # pylint: disable = broad-except
            except Exception:
                print(f"Encountered an error when trying to parse {info_plist_path}...")
                sys.exit(1)
            # Compare the installed version with this installations
            if LooseVersion(installed_version) &lt; LooseVersion(app_version):
                # Local version older, proceed with installation
                print("Older version of {app_path} located, proceeding with installation...")
                sys.exit(0)
            else:
                # Local version newer, cancelling installation
                print("Newer or the same version of {app_path} located, cancelling installation...")
                sys.exit(1)
        # App is not installed and user is logged in, proceed.
        else:
            sys.exit(0)

    # Exit as no-one logged in
    else:
        sys.exit(1)


def user_logged_in():
    '''
        Boolean return if a user is logged in or not
    '''

    # Returns the username if someone is logged in
    username = (SCDynamicStoreCopyConsoleUser(None, None, None) or [None])[0]

    # If a username is returned
    if username:
        # If the username isn't loginwindow
        if username != 'loginwindow':
            return True
        # Else we return True
        return False
    # If no-one is logged in
    return False

if __name__ == '__main__':
    main()</string>
                </dict>
            </dict>
        </dict>
        <dict>
            <key>Processor</key>
            <string>MunkiPkginfoMerger</string>
            <key>Arguments</key>
            <dict>
                <key>additional_pkginfo</key>
                <dict>
                    <key>version</key>
                    <string>%version%</string>
                </dict>
            </dict>
        </dict>
        <dict>
            <key>Processor</key>
            <string>MunkiImporter</string>
            <key>Arguments</key>
            <dict>
                <key>pkg_path</key>
                <string>%pathname%</string>
                <key>repo_subdirectory</key>
                <string>%MUNKI_REPO_SUBDIR%</string>
            </dict>
        </dict>
        <dict>
            <key>Processor</key>
            <string>PathDeleter</string>
            <key>Arguments</key>
            <dict>
                <key>path_list</key>
                <array>
                    <string>%RECIPE_CACHE_DIR%/%NAME%/</string>
                    <string>%RECIPE_CACHE_DIR%/unpack/</string>
                </array>
            </dict>
        </dict>
    </array>
</dict>
</plist>
