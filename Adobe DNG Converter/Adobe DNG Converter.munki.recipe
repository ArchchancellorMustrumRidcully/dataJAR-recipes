<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
    <key>Description</key>
    <string>Downloads the latest trial version of Adobe DNG Converter and imports into Munki.

Set the DERIVE_MIN_OS variable to a non-empty string to set the minimum_os_version via MunkiInstallsItemsCreator. This requires a minimum AutoPkg version of 2.7 please update if you're not already running it.</string>
    <key>Identifier</key>
    <string>com.github.dataJAR-recipes.munki.Adobe DNG Converter</string>
    <key>Input</key>
    <dict>
        <key>DERIVE_MIN_OS</key>
        <string>YES</string>
        <key>MUNKI_REPO_SUBDIR</key>
        <string>apps/adobe</string>
        <key>NAME</key>
        <string>AdobeDNGConverter</string>
        <key>pkginfo</key>
        <dict>
            <key>catalogs</key>
            <array>
                <string>testing</string>
            </array>
            <key>description</key>
            <string>Adobe DNG Converter, which lets you import and enhance raw images, has been a must-have tool for professional photographers right since it was first released in 2003.

Applications that support Adobe DNG Converter include Photoshop, Photoshop Elements, After Effects, and Bridge. Additionally, Adobe Lightroom is built upon the same powerful raw image processing technology that powers Adobe DNG Converter.</string>
            <key>developer</key>
            <string>Adobe</string>
            <key>display_name</key>
            <string>Adobe DNG Converter</string>
            <key>name</key>
            <string>%NAME%</string>
            <key>unattended_install</key>
            <false/>
            <key>uninstallable</key>
            <false/>
        </dict>
    </dict>
    <key>MinimumVersion</key>
    <string>2.7</string>
    <key>ParentRecipe</key>
    <string>com.github.dataJAR-recipes.download.Adobe DNG Converter</string>
    <key>Process</key>
    <array>
        <dict>
            <key>Processor</key>
            <string>FileFinder</string>
            <key>Arguments</key>
            <dict>
                <key>pattern</key>
                <string>%pathname%/*.pkg</string>
            </dict>
        </dict>
        <dict>
            <key>Processor</key>
            <string>FlatPkgUnpacker</string>
            <key>Arguments</key>
            <dict>
                <key>destination_path</key>
                <string>%RECIPE_CACHE_DIR%/unpacked</string>
                <key>flat_pkg_path</key>
                <string>%pathname%/%dmg_found_filename%</string>
                <key>purge_destination</key>
                <true/>
            </dict>
        </dict>
        <dict>
            <key>Processor</key>
            <string>PkgPayloadUnpacker</string>
            <key>Arguments</key>
            <dict>
                <key>destination_path</key>
                <string>%RECIPE_CACHE_DIR%/payload/Applications/</string>
                <key>pkg_payload_path</key>
                <string>%RECIPE_CACHE_DIR%/unpacked/DNGConverter.pkg/Payload</string>
                <key>purge_destination</key>
                <true/>
            </dict>
        </dict>
        <dict>
            <key>Processor</key>
            <string>com.github.homebysix.FindAndReplace/FindAndReplace</string>
            <key>Arguments</key>
            <dict>
                <key>find</key>
                <string> </string>
                <key>input_string</key>
                <string>file://localhost/%RECIPE_CACHE_DIR%/unpacked/Distribution</string>
                <key>replace</key>
                <string>%20</string>
            </dict>
        </dict>
        <dict>
            <key>Processor</key>
            <string>URLTextSearcher</string>
            <key>Arguments</key>
            <dict>
                <key>re_pattern</key>
                <string>os-version min=\"([0-9]+(\.[0-9]+)+)\"</string>
                <key>result_output_var_name</key>
                <string>min_os_ver</string>
                <key>url</key>
                <string>%output_string%</string>
            </dict>
        </dict>
        <dict>
            <key>Processor</key>
            <string>MunkiPkginfoMerger</string>
             <key>Arguments</key>
             <dict>
                <key>additional_pkginfo</key>
                <dict>
                    <key>minimum_os_version</key>
                    <string>%min_os_ver%</string>
                </dict>
            </dict>
        </dict>
        <dict>
            <key>Processor</key>
            <string>MunkiInstallsItemsCreator</string>
            <key>Arguments</key>
            <dict>
                <key>faux_root</key>
                <string>%RECIPE_CACHE_DIR%/payload/</string>
                <key>installs_item_paths</key>
                <array>
                    <string>/Applications/Adobe DNG Converter.app</string>
                </array>
            </dict>
        </dict>
        <dict>
            <key>Processor</key>
            <string>MunkiPkginfoMerger</string>
        </dict>
        <dict>
            <key>Processor</key>
            <string>Versioner</string>
            <key>Arguments</key>
            <dict>
                <key>input_plist_path</key>
                <string>%RECIPE_CACHE_DIR%/payload/Applications/Adobe DNG Converter.app/Contents/Info.plist</string>
                <key>plist_version_key</key>
                <string>CFBundleVersion</string>
            </dict>
        </dict>
        <dict>
            <key>Processor</key>
            <string>com.github.homebysix.VersionSplitter/VersionSplitter</string>
            <key>Arguments</key>
            <dict>
                <key>version</key>
                <string>%version%</string>
                <key>index</key>
                <integer>0</integer>
                <key>split_on</key>
                <string>f</string>
            </dict>
        </dict>
        <dict>
            <key>Processor</key>
            <string>MunkiPkginfoMerger</string>
            <key>Arguments</key>
            <dict>
                <key>additional_pkginfo</key>
                <dict>
                    <key>installcheck_script</key>
                    <string>#!/usr/local/munki/munki-python

'''
DESCRIPTION

See docstring in main()

'''

# Standard imports
import os
import plistlib
import sys

# Munki imports
sys.path.insert(0, '/usr/local/munki')
from munkilib.pkgutils import MunkiLooseVersion as LooseVersion


def main():
    '''
        Get the version of bundle_path, (if installed). This is achieved by splitting
        the value from the CFBundleVersion, using the version before the `f`.

        Exit 1 if bundle_path is installed and newer than what we have in Munki

    '''

    # Var declaration
    bundle_path = '/Applications/Adobe DNG Converter.app'
    bundle_info_plist = os.path.join(bundle_path, 'Contents/Info.plist')
    munki_version = '%version%'

    # If bundle_path is not installed, proceed.. else exit 0 so we can install
    if not os.path.exists(bundle_path):
        print(f"{bundle_path} not installed, exiting install_check script to install...")
        sys.exit(0)

    # If the info.plist exists
    if os.path.exists(bundle_info_plist):
        # Try to read in bundle_info_plist, raise if cannot be parsed
        try:
            # Read in the plist
            with open(bundle_info_plist, "rb") as plist_file:
                parsed_plist = plistlib.load(plist_file)
            # Get version from info.plist
            installed_version = parsed_plist['CFBundleVersion']
            print(f"{bundle_path} version {installed_version}, installed...")
        # Raising if plist cannot be parsed or version determined from plist
        # pylint: disable = broad-except
        except Exception:
            print(f"Encountered an error when trying to parse {bundle_info_plist}...")
            sys.exit(1)
        # Compare the installed version with this installations
        if LooseVersion(installed_version) &lt; LooseVersion(munki_version):
            # Local version older, proceed with installation
            print(f"Older version of {bundle_path} located, proceeding with installation...")
            sys.exit(0)
        else:
            # Local version newer, cancelling installation
            print(f"Newer or the same version of {bundle_path} located, cancelling installation...")
            sys.exit(1)
    # Raise if we can't find bundle_info_plist
    else:
        print("Cannot locate {bundle_info_plist}, proceeding with installation...")
        sys.exit(0)


if __name__ == '__main__':
    main()</string>
                    <key>version</key>
                    <string>%version%</string>
                </dict>
            </dict>
        </dict>
        <dict>
            <key>Processor</key>
            <string>MunkiPkginfoMerger</string>
        </dict>
        <dict>
            <key>Processor</key>
            <string>Copier</string>
            <key>Arguments</key>
            <dict>
                <key>destination_path</key>
                <string>%RECIPE_CACHE_DIR%/%NAME%.pkg</string>
                <key>source_path</key>
                <string>%pathname%/%dmg_found_filename%</string>
            </dict>
        </dict>
        <dict>
            <key>Processor</key>
            <string>MunkiImporter</string>
            <key>Arguments</key>
            <dict>
                <key>pkg_path</key>
                <string>%RECIPE_CACHE_DIR%/%NAME%.pkg</string>
                <key>repo_subdirectory</key>
                <string>%MUNKI_REPO_SUBDIR%</string>
                <key>version_comparison_key</key>
                <string>CFBundleVersion</string>
            </dict>
        </dict>
        <dict>
            <key>Processor</key>
            <string>PathDeleter</string>
            <key>Arguments</key>
            <dict>
                <key>path_list</key>
                <array>
                    <string>%RECIPE_CACHE_DIR%/unpacked</string>
                    <string>%RECIPE_CACHE_DIR%/payload</string>
                </array>
            </dict>
        </dict>
    </array>
</dict>
</plist>
